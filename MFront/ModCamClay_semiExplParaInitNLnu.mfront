@DSL Implicit;
@Behaviour ModCamClay_semiExplParaInitNLnu;
@Author Christian Silbermann, Thomas Helfer;
@Date 07/07/20;
@Description{
    The modified cam-clay model according to Callari (1998):
    "A finite-strain cam-clay model in the framework of multiplicative elasto-plasticity"
    but here in a geometrically linear form and with normalized plastic flow direction,
    porosity is treated explicitly, the nonlinear hypoelastic behavior w.r.t. pressure,
    minimum of elastic cohesion is provided taking into account a small ambient pressure
}

/* Domain variables:  dt (time increment)
  (Input)             theta (implicit time integration parameter)
                      eto, deto (total strain (increment))
                      eel, deel (elastic strain (increment))
                      sig (stress)
                      dlp (plastic increment)
                      dphi (porosity increment)
                      dpc (pre-consolidation pressure increment)

   Output:            feel (strain residual depending on deel, dlp, dpc)
                      flp  (yield function residual depending on deel, dpc)
                      fpc  (pc evolution residual depending on deel, dlp, dpc, dphi)
                      df..._dd... partial derivatives of the residuals
 */

@Theta 1.0;                     // time integration scheme
@Epsilon 1e-14;                 // tolerance of local stress integration algorithm
@MaximumNumberOfIterations 20;  // for local local stress integration algorithm
@ModellingHypotheses{".+"};     // supporting all stress and strain states
@Algorithm NewtonRaphson;       //_NumericalJacobian;_LevenbergMarquardt

// environmental parameters (default values)
@Parameter stress pamb = 1e+3; //Pa
@PhysicalBounds pamb in [0:*[;
pamb.setEntryName("AmbientPressure");

@Parameter stress pcMin = 1e-3; //1e+3 Pa
@PhysicalBounds pcMin in [0:*[;
pcMin.setEntryName("MinimalPreConsolidationPressure");

// material parameters
@MaterialProperty stress young;
@PhysicalBounds young in [0:*[;
young.setGlossaryName("YoungModulus");

@MaterialProperty real nu;
@PhysicalBounds nu in [-1:0.5];
nu.setGlossaryName("PoissonRatio");

@MaterialProperty real M;
@PhysicalBounds M in [0:*[;
M.setEntryName("CriticalStateLineSlope");

@MaterialProperty real ka;
@PhysicalBounds ka in [0:*[;
ka.setEntryName("SwellingLineSlope");

@MaterialProperty real la;
@PhysicalBounds la in [0:*[;
la.setEntryName("VirginConsolidationLineSlope");

// initial values
@MaterialProperty stress pc0;
pc0.setEntryName("InitialPreConsolidationPressure");
@PhysicalBounds pc0 in [0:*[;

@MaterialProperty real phi0;
@PhysicalBounds phi0 in [0:1];
phi0.setEntryName("InitialPorosity");

// state variables (beside eel):
// A "standard" state variable is a persistent state variable and an integration variable.
@StateVariable real lp;
lp.setGlossaryName("EquivalentPlasticStrain");

// @StateVariable stress pc;
// pc.setEntryName("ReducedPreConsolidationPressure");
@IntegrationVariable strain rpc;

// An auxiliary state variable is a persistent variable but not an integration variable.
@AuxiliaryStateVariable stress pc;
pc.setEntryName("PreConsolidationPressure");

@AuxiliaryStateVariable real epl_V;
epl_V.setEntryName("PlasticVolumetricStrain");

@AuxiliaryStateVariable real phi;
@PhysicalBounds phi in [0:1];
phi.setGlossaryName("Porosity");// Pore volume per total volume

@AuxiliaryStateVariable real v;
@PhysicalBounds v in [1:*[;
v.setEntryName("VolumeRatio");  // Total volume per solid volume = 1 + pore number

@AuxiliaryStateVariable real Time;

// local variables
@LocalVariable StiffnessTensor dsig_deel;
@LocalVariable bool withinElasticRange;
@LocalVariable stress v0;
@LocalVariable real M2;
@LocalVariable real rpcMin;

@Includes{
#ifndef MFRONT_PRESSUREDEPENDANTBULKMODULUS_IMPLEMENTATION
#define MFRONT_PRESSUREDEPENDANTBULKMODULUS_IMPLEMENTATION 1
    // compute the stress
    template <unsigned short N, typename stress, typename strain>
    void computeStress(tfel::math::st2tost2<N, stress> & dsig_deel,
                        tfel::math::stensor<N, stress> & sig,
                        const tfel::math::stensor<N, strain>& eel,
                        const double nu, const stress pamb, const strain v_ka)
    {
        using namespace tfel::math;
        using Stensor = tfel::math::stensor<N, strain>;
        using Stensor4 = tfel::math::st2tost2<N, strain>;

        constexpr auto id = Stensor::Id();
        const auto e = trace(eel);
        const auto s = deviator(eel);
		const auto r = 3 * (1 - 2 * nu) / (2 * (1 + nu));

        double K, G, p;
        if (e >= 0) // linear behavior with minimal elastic constants
        {
            K = v_ka * pamb;
            G = K * r;
            p = -K * e + pamb;
			// Hooke's law
            sig = 2 * G * s - p * id;
			// stress derivative
            dsig_deel = 2 * G * Stensor4::K() + K * Stensor4::IxI();
            std::cout << "Warning: pressure low:" << p 
            << "Elastic behavior set to linear." << std::endl;
        }
        else // nonlinear behavior with pressure-dependent elasticity
        {
            // explicit computation of the hydrostatic pressure
			p = pamb * exp(-v_ka * e);
			K = v_ka * p;
			G = r * K;  //  dG_de = r * dK_de = r * dK_dp * dp_de = - G * dK_dp;
            const auto dp_de = -K;
            const auto dK_dp = v_ka;
            // Hooke's law
            sig = 2 * G * s - p * id;
            // stress derivative
            dsig_deel = 2 * G * ( Stensor4::K() - dK_dp * (s^id) ) - dp_de * Stensor4::IxI();
        }
        // Hooke's law
        //sig = 2 * G * s - p * id;
    }  // end of computeStress
#endif /* MFRONT_PRESSUREDEPENDANTBULKMODULUS_IMPLEMENTATION */
}


@ComputeStress{
    const auto eps_el = StrainStensor{eel};
    ::computeStress(dsig_deel, sig, eps_el, nu, pamb, v/ka);
}

@InitLocalVariables
{
    tfel::raise_if(la < ka, "Invalid parameters: la<ka");
    M2 = M * M;
    const auto G = young / (2 * (1 + nu));

    // TODO may fail in restart simulations
    if (Time == 0)
    {
        // initialize state variables
        pc = pc0;
        phi = phi0;
        v = 1 / (1 - phi0);
        // initial elastic strain
        //std::cout << " sig " << sig << std::endl;
        const auto s = deviator(sig);
        const auto p = -trace(sig) / 3 + pamb;
        const auto K = v/ka * pamb;
        double e;
        if (p <= pamb) // linear behavior with minimal elastic constants
        {
            e = -(p - pamb) / K;
            //e = -ka/v * (p / pamb - 1)
        }
        else // nonlinear behavior with pressure-dependent elasticity
        {
            e = -ka/v * std::log(p / pamb);
        }
        // Hooke's law
        eel = (s/2) / G + (e/3) * Stensor::Id();
        //std::cout << " eel " << eel << std::endl;
    }
    rpc = pc / young;
    rpcMin = pcMin / young;

    // computation of the elastic prediction (does not work for plane stress!)
    const auto eps_el = StrainStensor{eel + deto};
    auto sig_el = StressStensor{};
    ::computeStress(dsig_deel, sig_el, eps_el, nu, pamb, v/ka);

    // elastic estimators
    const auto s_el = deviator(sig_el);
    const auto q_el = std::sqrt(1.5 * s_el | s_el);
    const auto p_el = -trace(sig_el) / 3;// + pamb;
    // add the ambient pressure to ensure an initial elastic range

    const auto pc_el = pc;
    const auto f_el = q_el * q_el + M2 * p_el * (p_el - pc_el);
    withinElasticRange = f_el < 0;
}

@Integrator
{
    constexpr const auto id2 = Stensor::Id();
    constexpr const auto Pr4 = Stensor4::K();
    const auto the = v / (la - ka);

    // elastic range:
    if (withinElasticRange)
    {
        feel -= deto;
        return true;
    }
    // plastic range:
    const auto epsr = strain(1.e-12);
    // calculate invariants from current stress sig
    const auto s = deviator(sig);
    const auto q = std::sqrt(1.5 * s | s);
    const auto p = -trace(sig) / 3;// + pamb;
    // update the internal (state) variables (rpc holds the old value!)
    const auto rpcNew = rpc + theta * drpc;
    const auto pcNew = rpcNew * young;
    // calculate the direction of plastic flow
    const auto f = (q * q + M2 * p * (p - pcNew));
    const auto df_dp = M2 * (2 * p - pcNew);
    const auto df_dsig = eval(3 * s - df_dp * id2 / 3);
    auto norm = std::sqrt(6 * q * q + df_dp * df_dp / 3);  // = std::sqrt(df_dsig|df_dsig);
    norm = std::max(norm, epsr * young);
    const auto n = df_dsig / norm;
    const auto ntr = -df_dp / norm;
    // plastic strain and volumetric part
    auto depl = eval(dlp * n);
    const auto deplV = trace(depl);

    const auto fchar = pc0 * young;  // OR: young*young

    // residual
    feel = deel + depl - deto;
    flp = f / fchar;
    frpc = drpc + deplV * the * (rpcNew - rpcMin);

    // auxiliary derivatives
    const auto dnorm_dsig = (9 * s - 2 * M2 / 9 * df_dp * id2) / norm;
    const auto dn_ddeel = (3 * Pr4 + 2 * M2 / 9 * (id2 ^ id2) - (n ^ dnorm_dsig)) / norm * dsig_deel * theta;
    const auto dn_ddrpc = (id2 + df_dp * n / norm) * M2 / (3 * norm) * theta * young;
    const auto dfrpc_ddeplV = the * (rpcNew - rpcMin);

    // jacobian (all other parts are zero)
    dfeel_ddeel += dlp * dn_ddeel;
    dfeel_ddlp = n;
    dfeel_ddrpc = dlp * dn_ddrpc;

    dflp_ddeel = (df_dsig | dsig_deel) * theta / fchar;    // in case of problems with zero use:
    dflp_ddlp  = strain(0);                         // (q<epsr) ? strain(1) : strain(0);
    dflp_ddrpc = -M2 * p * theta / fchar * young;

    dfrpc_ddlp = dfrpc_ddeplV * ntr;
    dfrpc_ddeel = dfrpc_ddeplV * dlp * (id2 | dn_ddeel);
    dfrpc_ddrpc = 1 + (deplV * the + dfrpc_ddeplV * dlp * trace(dn_ddrpc)) * theta;
}

// explicit treatment as long as change of v (or e) during time increment is small
@UpdateAuxiliaryStateVariables
{
    Time += dt;
    pc += drpc * young;
    const auto deelV = trace(deel);
    const auto detoV = trace(deto);
    epl_V += detoV - deelV;
    // calculate change of porosity
    const auto dphi = (1 - phi) * (1 - exp(-detoV));
    phi += dphi;
    v = 1.0 / (1 - phi);
}

@AdditionalConvergenceChecks
{
    if (converged)
    {
        if (!withinElasticRange)
        {
            if (dlp < 0)
            {
                std::cout << " Negative plastic increment! " << std::endl;
                converged = false;
                withinElasticRange = true;
            }
        }
    }
}

@TangentOperator // because no Brick StandardElasticity
{
    if ((smt == ELASTIC) || (smt == SECANTOPERATOR))
    {
        Dt = dsig_deel;
    }
    else if (smt == CONSISTENTTANGENTOPERATOR)
    {
        Stensor4 Je;
        getPartialJacobianInvert(Je);
        Dt = dsig_deel * Je;
    }
    else
    {
        return false;
    }
}
